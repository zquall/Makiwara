//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "WarehouseDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class WarehouseDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<StockDto> Stocks
        {
            get
            {
                if (_stocks == null)
                {
                    var newCollection = new FixupCollection<StockDto>();
                    newCollection.CollectionChanged += FixupStocks;
                    _stocks = newCollection;
                }
                return _stocks;
            }
            set
            {
                if (!ReferenceEquals(_stocks, value))
                {
                    var previousValue = _stocks as FixupCollection<StockDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStocks;
                    }
                    _stocks = value;
                    var newValue = value as FixupCollection<StockDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStocks;
                    }
                }
            }
        }
        private ICollection<StockDto> _stocks;
    
    	[DataMember]
        public virtual ICollection<StorageDto> Storages
        {
            get
            {
                if (_storages == null)
                {
                    var newCollection = new FixupCollection<StorageDto>();
                    newCollection.CollectionChanged += FixupStorages;
                    _storages = newCollection;
                }
                return _storages;
            }
            set
            {
                if (!ReferenceEquals(_storages, value))
                {
                    var previousValue = _storages as FixupCollection<StorageDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStorages;
                    }
                    _storages = value;
                    var newValue = value as FixupCollection<StorageDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStorages;
                    }
                }
            }
        }
        private ICollection<StorageDto> _storages;

        #endregion
        #region Association Fixup
    
        private void FixupStocks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StockDto item in e.NewItems)
                {
                    item.Warehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StockDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Warehouse, this))
                    {
                        item.Warehouse = null;
                    }
                }
            }
        }
    
        private void FixupStorages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StorageDto item in e.NewItems)
                {
                    item.Warehouse = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StorageDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Warehouse, this))
                    {
                        item.Warehouse = null;
                    }
                }
            }
        }

        #endregion
    }
}
