//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "RealResourceDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class RealResourceDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual long Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int MeasureId
        {
     
    
            get { return _measureId; }
            set
            {
                if (_measureId != value)
                {
                    if (Measure != null && Measure.Id != value)
                    {
                        Measure = null;
                    }
                    _measureId = value;
                }
            }
        }
        private int _measureId;
    
    	[DataMember]
        public virtual int ResourceTypeId
        {
     
    
            get { return _resourceTypeId; }
            set
            {
                if (_resourceTypeId != value)
                {
                    if (ResourceType != null && ResourceType.Id != value)
                    {
                        ResourceType = null;
                    }
                    _resourceTypeId = value;
                }
            }
        }
        private int _resourceTypeId;
    
    	[DataMember]
        public virtual long TaskId
        {
     
    
            get { return _taskId; }
            set
            {
                if (_taskId != value)
                {
                    if (RealTask != null && RealTask.Id != value)
                    {
                        RealTask = null;
                    }
                    _taskId = value;
                }
            }
        }
        private long _taskId;
    
    	[DataMember]
        public virtual string Code
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual double Amount
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal Cost
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal TotalCost
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual double RealUsed
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual MeasureDto Measure
        {
            get { return _measure; }
            set
            {
                if (!ReferenceEquals(_measure, value))
                {
                    var previousValue = _measure;
                    _measure = value;
                    FixupMeasure(previousValue);
                }
            }
        }
        private MeasureDto _measure;
    
    	[DataMember]
        public virtual RealTaskDto RealTask
        {
            get { return _realTask; }
            set
            {
                if (!ReferenceEquals(_realTask, value))
                {
                    var previousValue = _realTask;
                    _realTask = value;
                    FixupRealTask(previousValue);
                }
            }
        }
        private RealTaskDto _realTask;
    
    	[DataMember]
        public virtual ResourceTypeDto ResourceType
        {
            get { return _resourceType; }
            set
            {
                if (!ReferenceEquals(_resourceType, value))
                {
                    var previousValue = _resourceType;
                    _resourceType = value;
                    FixupResourceType(previousValue);
                }
            }
        }
        private ResourceTypeDto _resourceType;

        #endregion
        #region Association Fixup
    
        private void FixupMeasure(MeasureDto previousValue)
        {
            if (previousValue != null && previousValue.RealResources.Contains(this))
            {
                previousValue.RealResources.Remove(this);
            }
    
            if (Measure != null)
            {
                if (!Measure.RealResources.Contains(this))
                {
                    Measure.RealResources.Add(this);
                }
                if (MeasureId != Measure.Id)
                {
                    MeasureId = Measure.Id;
                }
            }
        }
    
        private void FixupRealTask(RealTaskDto previousValue)
        {
            if (previousValue != null && previousValue.RealResources.Contains(this))
            {
                previousValue.RealResources.Remove(this);
            }
    
            if (RealTask != null)
            {
                if (!RealTask.RealResources.Contains(this))
                {
                    RealTask.RealResources.Add(this);
                }
                if (TaskId != RealTask.Id)
                {
                    TaskId = RealTask.Id;
                }
            }
        }
    
        private void FixupResourceType(ResourceTypeDto previousValue)
        {
            if (previousValue != null && previousValue.RealResources.Contains(this))
            {
                previousValue.RealResources.Remove(this);
            }
    
            if (ResourceType != null)
            {
                if (!ResourceType.RealResources.Contains(this))
                {
                    ResourceType.RealResources.Add(this);
                }
                if (ResourceTypeId != ResourceType.Id)
                {
                    ResourceTypeId = ResourceType.Id;
                }
            }
        }

        #endregion
    }
}
