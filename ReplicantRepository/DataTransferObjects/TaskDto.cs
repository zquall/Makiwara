//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "TaskDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class TaskDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual long Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int ProjectId
        {
     
    
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (Project != null && Project.Id != value)
                    {
                        Project = null;
                    }
                    _projectId = value;
                }
            }
        }
        private int _projectId;
    
    	[DataMember]
        public virtual int ParentId
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Duration
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual double PercentComplete
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime StartDateTime
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime EndDateTime
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Notes
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int RowNumber
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int BindingListIndex
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime CompleteThrough
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DeadLine
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string DurationResolved
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime EndDateTimeResolved
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool Expanded
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsRoot
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsSumary
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int TaskLevel
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool Milestone
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool MilestoneResolved
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ProjectDto Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                }
            }
        }
        private ProjectDto _project;
    
    	[DataMember]
        public virtual ICollection<TaskDto> Task1
        {
            get
            {
                if (_task1 == null)
                {
                    var newCollection = new FixupCollection<TaskDto>();
                    newCollection.CollectionChanged += FixupTask1;
                    _task1 = newCollection;
                }
                return _task1;
            }
            set
            {
                if (!ReferenceEquals(_task1, value))
                {
                    var previousValue = _task1 as FixupCollection<TaskDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTask1;
                    }
                    _task1 = value;
                    var newValue = value as FixupCollection<TaskDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTask1;
                    }
                }
            }
        }
        private ICollection<TaskDto> _task1;
    
    	[DataMember]
        public virtual ICollection<TaskDto> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<TaskDto>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<TaskDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<TaskDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
                }
            }
        }
        private ICollection<TaskDto> _tasks;

        #endregion
        #region Association Fixup
    
        private void FixupProject(ProjectDto previousValue)
        {
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Tasks.Contains(this))
                {
                    Project.Tasks.Add(this);
                }
                if (ProjectId != Project.Id)
                {
                    ProjectId = Project.Id;
                }
            }
        }
    
        private void FixupTask1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TaskDto item in e.NewItems)
                {
                    if (!item.Tasks.Contains(this))
                    {
                        item.Tasks.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskDto item in e.OldItems)
                {
                    if (item.Tasks.Contains(this))
                    {
                        item.Tasks.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TaskDto item in e.NewItems)
                {
                    if (!item.Task1.Contains(this))
                    {
                        item.Task1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskDto item in e.OldItems)
                {
                    if (item.Task1.Contains(this))
                    {
                        item.Task1.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
