//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "BudgetRequestDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class BudgetRequestDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int CustomerId
        {
     
    
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    if (Customer != null && Customer.Id != value)
                    {
                        Customer = null;
                    }
                    _customerId = value;
                }
            }
        }
        private int _customerId;
    
    	[DataMember]
        public virtual string ProjectName
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DateModified
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int EmployeeId
        {
     
    
            get { return _employeeId; }
            set
            {
                if (_employeeId != value)
                {
                    if (Employee != null && Employee.Id != value)
                    {
                        Employee = null;
                    }
                    _employeeId = value;
                }
            }
        }
        private int _employeeId;

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual CustomerDto Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private CustomerDto _customer;
    
    	[DataMember]
        public virtual EmployeeDto Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                }
            }
        }
        private EmployeeDto _employee;
    
    	[DataMember]
        public virtual ICollection<BudgetRequestDetailDto> BudgetRequestDetails
        {
            get
            {
                if (_budgetRequestDetails == null)
                {
                    var newCollection = new FixupCollection<BudgetRequestDetailDto>();
                    newCollection.CollectionChanged += FixupBudgetRequestDetails;
                    _budgetRequestDetails = newCollection;
                }
                return _budgetRequestDetails;
            }
            set
            {
                if (!ReferenceEquals(_budgetRequestDetails, value))
                {
                    var previousValue = _budgetRequestDetails as FixupCollection<BudgetRequestDetailDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBudgetRequestDetails;
                    }
                    _budgetRequestDetails = value;
                    var newValue = value as FixupCollection<BudgetRequestDetailDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBudgetRequestDetails;
                    }
                }
            }
        }
        private ICollection<BudgetRequestDetailDto> _budgetRequestDetails;
    
    	[DataMember]
        public virtual ICollection<ProjectDto> Projects
        {
            get
            {
                if (_projects == null)
                {
                    var newCollection = new FixupCollection<ProjectDto>();
                    newCollection.CollectionChanged += FixupProjects;
                    _projects = newCollection;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    var previousValue = _projects as FixupCollection<ProjectDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    var newValue = value as FixupCollection<ProjectDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProjects;
                    }
                }
            }
        }
        private ICollection<ProjectDto> _projects;

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(CustomerDto previousValue)
        {
            if (previousValue != null && previousValue.BudgetRequests.Contains(this))
            {
                previousValue.BudgetRequests.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.BudgetRequests.Contains(this))
                {
                    Customer.BudgetRequests.Add(this);
                }
                if (CustomerId != Customer.Id)
                {
                    CustomerId = Customer.Id;
                }
            }
        }
    
        private void FixupEmployee(EmployeeDto previousValue)
        {
            if (previousValue != null && previousValue.BudgetRequests.Contains(this))
            {
                previousValue.BudgetRequests.Remove(this);
            }
    
            if (Employee != null)
            {
                if (!Employee.BudgetRequests.Contains(this))
                {
                    Employee.BudgetRequests.Add(this);
                }
                if (EmployeeId != Employee.Id)
                {
                    EmployeeId = Employee.Id;
                }
            }
        }
    
        private void FixupBudgetRequestDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BudgetRequestDetailDto item in e.NewItems)
                {
                    item.BudgetRequest = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BudgetRequestDetailDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.BudgetRequest, this))
                    {
                        item.BudgetRequest = null;
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProjectDto item in e.NewItems)
                {
                    item.BudgetRequest = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.BudgetRequest, this))
                    {
                        item.BudgetRequest = null;
                    }
                }
            }
        }

        #endregion
    }
}
