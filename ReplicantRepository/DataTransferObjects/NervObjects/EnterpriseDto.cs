//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects.NervObjects
{
    
    [DataContract(Name = "EnterpriseDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class EnterpriseDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int CurrencyId
        {
     
    
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    if (Currency != null && Currency.Id != value)
                    {
                        Currency = null;
                    }
                    _currencyId = value;
                }
            }
        }
        private int _currencyId;
    
    	[DataMember]
        public virtual string DataBaseName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual CurrencyDto Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                }
            }
        }
        private CurrencyDto _currency;
    
    	[DataMember]
        public virtual ICollection<UserAccountDto> UserAccounts
        {
            get
            {
                if (_userAccounts == null)
                {
                    var newCollection = new FixupCollection<UserAccountDto>();
                    newCollection.CollectionChanged += FixupUserAccounts;
                    _userAccounts = newCollection;
                }
                return _userAccounts;
            }
            set
            {
                if (!ReferenceEquals(_userAccounts, value))
                {
                    var previousValue = _userAccounts as FixupCollection<UserAccountDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserAccounts;
                    }
                    _userAccounts = value;
                    var newValue = value as FixupCollection<UserAccountDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserAccounts;
                    }
                }
            }
        }
        private ICollection<UserAccountDto> _userAccounts;

        #endregion
        #region Association Fixup
    
        private void FixupCurrency(CurrencyDto previousValue)
        {
            if (previousValue != null && previousValue.Enterprises.Contains(this))
            {
                previousValue.Enterprises.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.Enterprises.Contains(this))
                {
                    Currency.Enterprises.Add(this);
                }
                if (CurrencyId != Currency.Id)
                {
                    CurrencyId = Currency.Id;
                }
            }
        }
    
        private void FixupUserAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserAccountDto item in e.NewItems)
                {
                    item.Enterprise = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserAccountDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Enterprise, this))
                    {
                        item.Enterprise = null;
                    }
                }
            }
        }

        #endregion
    }
}
