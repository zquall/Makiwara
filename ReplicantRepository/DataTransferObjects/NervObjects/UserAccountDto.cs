//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects.NervObjects
{
    
    [DataContract(Name = "UserAccountDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class UserAccountDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Account
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Password
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int EnterpriseId
        {
     
    
            get { return _enterpriseId; }
            set
            {
                if (_enterpriseId != value)
                {
                    if (Enterprise != null && Enterprise.Id != value)
                    {
                        Enterprise = null;
                    }
                    _enterpriseId = value;
                }
            }
        }
        private int _enterpriseId;
    
    	[DataMember]
        public virtual bool Status
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsOnline
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int UserGroupId
        {
     
    
            get { return _userGroupId; }
            set
            {
                if (_userGroupId != value)
                {
                    if (UserGroup != null && UserGroup.Id != value)
                    {
                        UserGroup = null;
                    }
                    _userGroupId = value;
                }
            }
        }
        private int _userGroupId;

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual EnterpriseDto Enterprise
        {
            get { return _enterprise; }
            set
            {
                if (!ReferenceEquals(_enterprise, value))
                {
                    var previousValue = _enterprise;
                    _enterprise = value;
                    FixupEnterprise(previousValue);
                }
            }
        }
        private EnterpriseDto _enterprise;
    
    	[DataMember]
        public virtual UserGroupDto UserGroup
        {
            get { return _userGroup; }
            set
            {
                if (!ReferenceEquals(_userGroup, value))
                {
                    var previousValue = _userGroup;
                    _userGroup = value;
                    FixupUserGroup(previousValue);
                }
            }
        }
        private UserGroupDto _userGroup;

        #endregion
        #region Association Fixup
    
        private void FixupEnterprise(EnterpriseDto previousValue)
        {
            if (previousValue != null && previousValue.UserAccounts.Contains(this))
            {
                previousValue.UserAccounts.Remove(this);
            }
    
            if (Enterprise != null)
            {
                if (!Enterprise.UserAccounts.Contains(this))
                {
                    Enterprise.UserAccounts.Add(this);
                }
                if (EnterpriseId != Enterprise.Id)
                {
                    EnterpriseId = Enterprise.Id;
                }
            }
        }
    
        private void FixupUserGroup(UserGroupDto previousValue)
        {
            if (previousValue != null && previousValue.UserAccounts.Contains(this))
            {
                previousValue.UserAccounts.Remove(this);
            }
    
            if (UserGroup != null)
            {
                if (!UserGroup.UserAccounts.Contains(this))
                {
                    UserGroup.UserAccounts.Add(this);
                }
                if (UserGroupId != UserGroup.Id)
                {
                    UserGroupId = UserGroup.Id;
                }
            }
        }

        #endregion
    }
}
