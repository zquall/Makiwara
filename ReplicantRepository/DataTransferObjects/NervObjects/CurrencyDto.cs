//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects.NervObjects
{
    
    [DataContract(Name = "CurrencyDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class CurrencyDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Symbol
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsBaseCurrency
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Mask
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<CurrencyRateDto> CurrencyRates
        {
            get
            {
                if (_currencyRates == null)
                {
                    var newCollection = new FixupCollection<CurrencyRateDto>();
                    newCollection.CollectionChanged += FixupCurrencyRates;
                    _currencyRates = newCollection;
                }
                return _currencyRates;
            }
            set
            {
                if (!ReferenceEquals(_currencyRates, value))
                {
                    var previousValue = _currencyRates as FixupCollection<CurrencyRateDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCurrencyRates;
                    }
                    _currencyRates = value;
                    var newValue = value as FixupCollection<CurrencyRateDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCurrencyRates;
                    }
                }
            }
        }
        private ICollection<CurrencyRateDto> _currencyRates;
    
    	[DataMember]
        public virtual ICollection<CurrencyRateDto> CurrencyRates1
        {
            get
            {
                if (_currencyRates1 == null)
                {
                    var newCollection = new FixupCollection<CurrencyRateDto>();
                    newCollection.CollectionChanged += FixupCurrencyRates1;
                    _currencyRates1 = newCollection;
                }
                return _currencyRates1;
            }
            set
            {
                if (!ReferenceEquals(_currencyRates1, value))
                {
                    var previousValue = _currencyRates1 as FixupCollection<CurrencyRateDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCurrencyRates1;
                    }
                    _currencyRates1 = value;
                    var newValue = value as FixupCollection<CurrencyRateDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCurrencyRates1;
                    }
                }
            }
        }
        private ICollection<CurrencyRateDto> _currencyRates1;
    
    	[DataMember]
        public virtual ICollection<EnterpriseDto> Enterprises
        {
            get
            {
                if (_enterprises == null)
                {
                    var newCollection = new FixupCollection<EnterpriseDto>();
                    newCollection.CollectionChanged += FixupEnterprises;
                    _enterprises = newCollection;
                }
                return _enterprises;
            }
            set
            {
                if (!ReferenceEquals(_enterprises, value))
                {
                    var previousValue = _enterprises as FixupCollection<EnterpriseDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEnterprises;
                    }
                    _enterprises = value;
                    var newValue = value as FixupCollection<EnterpriseDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEnterprises;
                    }
                }
            }
        }
        private ICollection<EnterpriseDto> _enterprises;

        #endregion
        #region Association Fixup
    
        private void FixupCurrencyRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CurrencyRateDto item in e.NewItems)
                {
                    item.Currency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CurrencyRateDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                }
            }
        }
    
        private void FixupCurrencyRates1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CurrencyRateDto item in e.NewItems)
                {
                    item.Currency1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CurrencyRateDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency1, this))
                    {
                        item.Currency1 = null;
                    }
                }
            }
        }
    
        private void FixupEnterprises(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EnterpriseDto item in e.NewItems)
                {
                    item.Currency = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EnterpriseDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                }
            }
        }

        #endregion
    }
}
