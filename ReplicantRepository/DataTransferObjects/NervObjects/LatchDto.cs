//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects.NervObjects
{
    
    [DataContract(Name = "LatchDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class LatchDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Code
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int LatchParent
        {
     
    
            get { return _latchParent; }
            set
            {
                if (_latchParent != value)
                {
                    if (Latch2 != null && Latch2.Id != value)
                    {
                        Latch2 = null;
                    }
                    _latchParent = value;
                }
            }
        }
        private int _latchParent;
    
    	[DataMember]
        public virtual string Caption
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<KeyAccessDto> KeyAccesses
        {
            get
            {
                if (_keyAccesses == null)
                {
                    var newCollection = new FixupCollection<KeyAccessDto>();
                    newCollection.CollectionChanged += FixupKeyAccesses;
                    _keyAccesses = newCollection;
                }
                return _keyAccesses;
            }
            set
            {
                if (!ReferenceEquals(_keyAccesses, value))
                {
                    var previousValue = _keyAccesses as FixupCollection<KeyAccessDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupKeyAccesses;
                    }
                    _keyAccesses = value;
                    var newValue = value as FixupCollection<KeyAccessDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupKeyAccesses;
                    }
                }
            }
        }
        private ICollection<KeyAccessDto> _keyAccesses;
    
    	[DataMember]
        public virtual ICollection<LatchDto> Latch1
        {
            get
            {
                if (_latch1 == null)
                {
                    var newCollection = new FixupCollection<LatchDto>();
                    newCollection.CollectionChanged += FixupLatch1;
                    _latch1 = newCollection;
                }
                return _latch1;
            }
            set
            {
                if (!ReferenceEquals(_latch1, value))
                {
                    var previousValue = _latch1 as FixupCollection<LatchDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLatch1;
                    }
                    _latch1 = value;
                    var newValue = value as FixupCollection<LatchDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLatch1;
                    }
                }
            }
        }
        private ICollection<LatchDto> _latch1;
    
    	[DataMember]
        public virtual LatchDto Latch2
        {
            get { return _latch2; }
            set
            {
                if (!ReferenceEquals(_latch2, value))
                {
                    var previousValue = _latch2;
                    _latch2 = value;
                    FixupLatch2(previousValue);
                }
            }
        }
        private LatchDto _latch2;

        #endregion
        #region Association Fixup
    
        private void FixupLatch2(LatchDto previousValue)
        {
            if (previousValue != null && previousValue.Latch1.Contains(this))
            {
                previousValue.Latch1.Remove(this);
            }
    
            if (Latch2 != null)
            {
                if (!Latch2.Latch1.Contains(this))
                {
                    Latch2.Latch1.Add(this);
                }
                if (LatchParent != Latch2.Id)
                {
                    LatchParent = Latch2.Id;
                }
            }
        }
    
        private void FixupKeyAccesses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (KeyAccessDto item in e.NewItems)
                {
                    item.Latch = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KeyAccessDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Latch, this))
                    {
                        item.Latch = null;
                    }
                }
            }
        }
    
        private void FixupLatch1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LatchDto item in e.NewItems)
                {
                    item.Latch2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LatchDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Latch2, this))
                    {
                        item.Latch2 = null;
                    }
                }
            }
        }

        #endregion
    }
}
