//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "ProjectInformDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class ProjectInformDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int ProjectId
        {
     
    
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (Project != null && Project.Id != value)
                    {
                        Project = null;
                    }
                    _projectId = value;
                }
            }
        }
        private int _projectId;
    
    	[DataMember]
        public virtual int StateId
        {
     
    
            get { return _stateId; }
            set
            {
                if (_stateId != value)
                {
                    if (State != null && State.Id != value)
                    {
                        State = null;
                    }
                    _stateId = value;
                }
            }
        }
        private int _stateId;
    
    	[DataMember]
        public virtual bool WasDeleted
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DateModified
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal Advanced
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int UserId
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ProjectDto Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                }
            }
        }
        private ProjectDto _project;
    
    	[DataMember]
        public virtual StateDto State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private StateDto _state;

        #endregion
        #region Association Fixup
    
        private void FixupProject(ProjectDto previousValue)
        {
            if (previousValue != null && previousValue.ProjectInforms.Contains(this))
            {
                previousValue.ProjectInforms.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.ProjectInforms.Contains(this))
                {
                    Project.ProjectInforms.Add(this);
                }
                if (ProjectId != Project.Id)
                {
                    ProjectId = Project.Id;
                }
            }
        }
    
        private void FixupState(StateDto previousValue)
        {
            if (previousValue != null && previousValue.ProjectInforms.Contains(this))
            {
                previousValue.ProjectInforms.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.ProjectInforms.Contains(this))
                {
                    State.ProjectInforms.Add(this);
                }
                if (StateId != State.Id)
                {
                    StateId = State.Id;
                }
            }
        }

        #endregion
    }
}
