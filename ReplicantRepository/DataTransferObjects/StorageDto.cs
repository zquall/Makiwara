//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "StorageDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class StorageDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int RentalItemId
        {
     
    
            get { return _rentalItemId; }
            set
            {
                if (_rentalItemId != value)
                {
                    if (RentalItem != null && RentalItem.Id != value)
                    {
                        RentalItem = null;
                    }
                    _rentalItemId = value;
                }
            }
        }
        private int _rentalItemId;
    
    	[DataMember]
        public virtual int WarehouseId
        {
     
    
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    if (Warehouse != null && Warehouse.Id != value)
                    {
                        Warehouse = null;
                    }
                    _warehouseId = value;
                }
            }
        }
        private int _warehouseId;
    
    	[DataMember]
        public virtual decimal Quantity
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int MaximunDiscount
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int MinimunCount
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal Available
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual RentalItemDto RentalItem
        {
            get { return _rentalItem; }
            set
            {
                if (!ReferenceEquals(_rentalItem, value))
                {
                    var previousValue = _rentalItem;
                    _rentalItem = value;
                    FixupRentalItem(previousValue);
                }
            }
        }
        private RentalItemDto _rentalItem;
    
    	[DataMember]
        public virtual WarehouseDto Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                }
            }
        }
        private WarehouseDto _warehouse;

        #endregion
        #region Association Fixup
    
        private void FixupRentalItem(RentalItemDto previousValue)
        {
            if (previousValue != null && previousValue.Storages.Contains(this))
            {
                previousValue.Storages.Remove(this);
            }
    
            if (RentalItem != null)
            {
                if (!RentalItem.Storages.Contains(this))
                {
                    RentalItem.Storages.Add(this);
                }
                if (RentalItemId != RentalItem.Id)
                {
                    RentalItemId = RentalItem.Id;
                }
            }
        }
    
        private void FixupWarehouse(WarehouseDto previousValue)
        {
            if (previousValue != null && previousValue.Storages.Contains(this))
            {
                previousValue.Storages.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.Storages.Contains(this))
                {
                    Warehouse.Storages.Add(this);
                }
                if (WarehouseId != Warehouse.Id)
                {
                    WarehouseId = Warehouse.Id;
                }
            }
        }

        #endregion
    }
}
