//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "FamilyDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class FamilyDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int FamilyId
        {
     
    
            get { return _familyId; }
            set
            {
                if (_familyId != value)
                {
                    if (Family2 != null && Family2.Id != value)
                    {
                        Family2 = null;
                    }
                    _familyId = value;
                }
            }
        }
        private int _familyId;
    
    	[DataMember]
        public virtual string Code
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal MaximunDiscount
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual decimal MinimunProfit
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<ItemDto> Items
        {
            get
            {
                if (_items == null)
                {
                    var newCollection = new FixupCollection<ItemDto>();
                    newCollection.CollectionChanged += FixupItems;
                    _items = newCollection;
                }
                return _items;
            }
            set
            {
                if (!ReferenceEquals(_items, value))
                {
                    var previousValue = _items as FixupCollection<ItemDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupItems;
                    }
                    _items = value;
                    var newValue = value as FixupCollection<ItemDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupItems;
                    }
                }
            }
        }
        private ICollection<ItemDto> _items;
    
    	[DataMember]
        public virtual ICollection<RentalItemDto> RentalItems
        {
            get
            {
                if (_rentalItems == null)
                {
                    var newCollection = new FixupCollection<RentalItemDto>();
                    newCollection.CollectionChanged += FixupRentalItems;
                    _rentalItems = newCollection;
                }
                return _rentalItems;
            }
            set
            {
                if (!ReferenceEquals(_rentalItems, value))
                {
                    var previousValue = _rentalItems as FixupCollection<RentalItemDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRentalItems;
                    }
                    _rentalItems = value;
                    var newValue = value as FixupCollection<RentalItemDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRentalItems;
                    }
                }
            }
        }
        private ICollection<RentalItemDto> _rentalItems;
    
    	[DataMember]
        public virtual ICollection<FamilyDto> Family1
        {
            get
            {
                if (_family1 == null)
                {
                    var newCollection = new FixupCollection<FamilyDto>();
                    newCollection.CollectionChanged += FixupFamily1;
                    _family1 = newCollection;
                }
                return _family1;
            }
            set
            {
                if (!ReferenceEquals(_family1, value))
                {
                    var previousValue = _family1 as FixupCollection<FamilyDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFamily1;
                    }
                    _family1 = value;
                    var newValue = value as FixupCollection<FamilyDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFamily1;
                    }
                }
            }
        }
        private ICollection<FamilyDto> _family1;
    
    	[DataMember]
        public virtual FamilyDto Family2
        {
            get { return _family2; }
            set
            {
                if (!ReferenceEquals(_family2, value))
                {
                    var previousValue = _family2;
                    _family2 = value;
                    FixupFamily2(previousValue);
                }
            }
        }
        private FamilyDto _family2;

        #endregion
        #region Association Fixup
    
        private void FixupFamily2(FamilyDto previousValue)
        {
            if (previousValue != null && previousValue.Family1.Contains(this))
            {
                previousValue.Family1.Remove(this);
            }
    
            if (Family2 != null)
            {
                if (!Family2.Family1.Contains(this))
                {
                    Family2.Family1.Add(this);
                }
                if (FamilyId != Family2.Id)
                {
                    FamilyId = Family2.Id;
                }
            }
        }
    
        private void FixupItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ItemDto item in e.NewItems)
                {
                    item.Family = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ItemDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Family, this))
                    {
                        item.Family = null;
                    }
                }
            }
        }
    
        private void FixupRentalItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RentalItemDto item in e.NewItems)
                {
                    item.Family = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RentalItemDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Family, this))
                    {
                        item.Family = null;
                    }
                }
            }
        }
    
        private void FixupFamily1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FamilyDto item in e.NewItems)
                {
                    item.Family2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FamilyDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Family2, this))
                    {
                        item.Family2 = null;
                    }
                }
            }
        }

        #endregion
    }
}
