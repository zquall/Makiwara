//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "BudgetRequestDetailDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class BudgetRequestDetailDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual int Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int ApplicationRequestId
        {
     
    
            get { return _applicationRequestId; }
            set
            {
                if (_applicationRequestId != value)
                {
                    if (BudgetRequest != null && BudgetRequest.Id != value)
                    {
                        BudgetRequest = null;
                    }
                    _applicationRequestId = value;
                }
            }
        }
        private int _applicationRequestId;
    
    	[DataMember]
        public virtual int MeasureId
        {
     
    
            get { return _measureId; }
            set
            {
                if (_measureId != value)
                {
                    if (Measure != null && Measure.Id != value)
                    {
                        Measure = null;
                    }
                    _measureId = value;
                }
            }
        }
        private int _measureId;
    
    	[DataMember]
        public virtual double Quantity
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Problem
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Solution
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual BudgetRequestDto BudgetRequest
        {
            get { return _budgetRequest; }
            set
            {
                if (!ReferenceEquals(_budgetRequest, value))
                {
                    var previousValue = _budgetRequest;
                    _budgetRequest = value;
                    FixupBudgetRequest(previousValue);
                }
            }
        }
        private BudgetRequestDto _budgetRequest;
    
    	[DataMember]
        public virtual MeasureDto Measure
        {
            get { return _measure; }
            set
            {
                if (!ReferenceEquals(_measure, value))
                {
                    var previousValue = _measure;
                    _measure = value;
                    FixupMeasure(previousValue);
                }
            }
        }
        private MeasureDto _measure;

        #endregion
        #region Association Fixup
    
        private void FixupBudgetRequest(BudgetRequestDto previousValue)
        {
            if (previousValue != null && previousValue.BudgetRequestDetails.Contains(this))
            {
                previousValue.BudgetRequestDetails.Remove(this);
            }
    
            if (BudgetRequest != null)
            {
                if (!BudgetRequest.BudgetRequestDetails.Contains(this))
                {
                    BudgetRequest.BudgetRequestDetails.Add(this);
                }
                if (ApplicationRequestId != BudgetRequest.Id)
                {
                    ApplicationRequestId = BudgetRequest.Id;
                }
            }
        }
    
        private void FixupMeasure(MeasureDto previousValue)
        {
            if (previousValue != null && previousValue.BudgetRequestDetails.Contains(this))
            {
                previousValue.BudgetRequestDetails.Remove(this);
            }
    
            if (Measure != null)
            {
                if (!Measure.BudgetRequestDetails.Contains(this))
                {
                    Measure.BudgetRequestDetails.Add(this);
                }
                if (MeasureId != Measure.Id)
                {
                    MeasureId = Measure.Id;
                }
            }
        }

        #endregion
    }
}
