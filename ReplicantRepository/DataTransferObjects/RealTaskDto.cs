//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ReplicantRepository.DataTransferObjects
{
    
    [DataContract(Name = "RealTaskDto", Namespace = "http://core.renteco.com/dto/" , IsReference = true) ]
    public partial class RealTaskDto
    {
         #region Primitive Properties
    
    	[DataMember]
        public virtual long Id
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int ProjectId
        {
     
    
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (Project != null && Project.Id != value)
                    {
                        Project = null;
                    }
                    _projectId = value;
                }
            }
        }
        private int _projectId;
    
    	[DataMember]
        public virtual int ParentId
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Name
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Duration
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual double PercentComplete
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime StartDateTime
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime EndDateTime
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string Notes
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int RowNumber
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int BindingListIndex
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime CompleteThrough
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime DeadLine
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual string DurationResolved
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual System.DateTime EndDateTimeResolved
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool Expanded
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsRoot
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool IsSumary
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual int TaskLevel
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool Milestone
        {
            get;
            set;
        }
    
    	[DataMember]
        public virtual bool MilestoneResolved
        {
            get;
            set;
        }
    	// Custom ToString() Method using reflection
    	// Autor: Jaime Torner
    	public override string ToString() 
    	{		
    		return CustomToStringMethods.ToString(this);
    	}
    

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ProjectDto Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                }
            }
        }
        private ProjectDto _project;
    
    	[DataMember]
        public virtual ICollection<RealResourceDto> RealResources
        {
            get
            {
                if (_realResources == null)
                {
                    var newCollection = new FixupCollection<RealResourceDto>();
                    newCollection.CollectionChanged += FixupRealResources;
                    _realResources = newCollection;
                }
                return _realResources;
            }
            set
            {
                if (!ReferenceEquals(_realResources, value))
                {
                    var previousValue = _realResources as FixupCollection<RealResourceDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRealResources;
                    }
                    _realResources = value;
                    var newValue = value as FixupCollection<RealResourceDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRealResources;
                    }
                }
            }
        }
        private ICollection<RealResourceDto> _realResources;
    
    	[DataMember]
        public virtual ICollection<RealTaskDto> RealTask1
        {
            get
            {
                if (_realTask1 == null)
                {
                    var newCollection = new FixupCollection<RealTaskDto>();
                    newCollection.CollectionChanged += FixupRealTask1;
                    _realTask1 = newCollection;
                }
                return _realTask1;
            }
            set
            {
                if (!ReferenceEquals(_realTask1, value))
                {
                    var previousValue = _realTask1 as FixupCollection<RealTaskDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRealTask1;
                    }
                    _realTask1 = value;
                    var newValue = value as FixupCollection<RealTaskDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRealTask1;
                    }
                }
            }
        }
        private ICollection<RealTaskDto> _realTask1;
    
    	[DataMember]
        public virtual ICollection<RealTaskDto> RealTasks
        {
            get
            {
                if (_realTasks == null)
                {
                    var newCollection = new FixupCollection<RealTaskDto>();
                    newCollection.CollectionChanged += FixupRealTasks;
                    _realTasks = newCollection;
                }
                return _realTasks;
            }
            set
            {
                if (!ReferenceEquals(_realTasks, value))
                {
                    var previousValue = _realTasks as FixupCollection<RealTaskDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRealTasks;
                    }
                    _realTasks = value;
                    var newValue = value as FixupCollection<RealTaskDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRealTasks;
                    }
                }
            }
        }
        private ICollection<RealTaskDto> _realTasks;

        #endregion
        #region Association Fixup
    
        private void FixupProject(ProjectDto previousValue)
        {
            if (previousValue != null && previousValue.RealTasks.Contains(this))
            {
                previousValue.RealTasks.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.RealTasks.Contains(this))
                {
                    Project.RealTasks.Add(this);
                }
                if (ProjectId != Project.Id)
                {
                    ProjectId = Project.Id;
                }
            }
        }
    
        private void FixupRealResources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RealResourceDto item in e.NewItems)
                {
                    item.RealTask = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RealResourceDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.RealTask, this))
                    {
                        item.RealTask = null;
                    }
                }
            }
        }
    
        private void FixupRealTask1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RealTaskDto item in e.NewItems)
                {
                    if (!item.RealTasks.Contains(this))
                    {
                        item.RealTasks.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RealTaskDto item in e.OldItems)
                {
                    if (item.RealTasks.Contains(this))
                    {
                        item.RealTasks.Remove(this);
                    }
                }
            }
        }
    
        private void FixupRealTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RealTaskDto item in e.NewItems)
                {
                    if (!item.RealTask1.Contains(this))
                    {
                        item.RealTask1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RealTaskDto item in e.OldItems)
                {
                    if (item.RealTask1.Contains(this))
                    {
                        item.RealTask1.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
