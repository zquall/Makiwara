//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("NERVModel", "FK_KeyAccess_Latch", "Latch", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Nerv.Latch), "KeyAccess", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Nerv.KeyAccess), true)]
[assembly: EdmRelationshipAttribute("NERVModel", "FK_KeyAccess_UserGroup", "UserGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Nerv.UserGroup), "KeyAccess", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Nerv.KeyAccess), true)]
[assembly: EdmRelationshipAttribute("NERVModel", "FK_Latch_Latch", "Latch", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Nerv.Latch), "Latch1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Nerv.Latch), true)]
[assembly: EdmRelationshipAttribute("NERVModel", "FK_UserAccount_UserGroup", "UserGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Nerv.UserGroup), "UserAccount", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Nerv.UserAccount), true)]

#endregion

namespace Nerv
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NERVEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new NERVEntities object using the connection string found in the 'NERVEntities' section of the application configuration file.
        /// </summary>
        public NERVEntities() : base("name=NERVEntities", "NERVEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NERVEntities object.
        /// </summary>
        public NERVEntities(string connectionString) : base(connectionString, "NERVEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NERVEntities object.
        /// </summary>
        public NERVEntities(EntityConnection connection) : base(connection, "NERVEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<KeyAccess> KeyAccesses
        {
            get
            {
                if ((_KeyAccesses == null))
                {
                    _KeyAccesses = base.CreateObjectSet<KeyAccess>("KeyAccesses");
                }
                return _KeyAccesses;
            }
        }
        private ObjectSet<KeyAccess> _KeyAccesses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Latch> Latches
        {
            get
            {
                if ((_Latches == null))
                {
                    _Latches = base.CreateObjectSet<Latch>("Latches");
                }
                return _Latches;
            }
        }
        private ObjectSet<Latch> _Latches;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserGroup> UserGroups
        {
            get
            {
                if ((_UserGroups == null))
                {
                    _UserGroups = base.CreateObjectSet<UserGroup>("UserGroups");
                }
                return _UserGroups;
            }
        }
        private ObjectSet<UserGroup> _UserGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserAccount> UserAccounts
        {
            get
            {
                if ((_UserAccounts == null))
                {
                    _UserAccounts = base.CreateObjectSet<UserAccount>("UserAccounts");
                }
                return _UserAccounts;
            }
        }
        private ObjectSet<UserAccount> _UserAccounts;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the KeyAccesses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToKeyAccesses(KeyAccess keyAccess)
        {
            base.AddObject("KeyAccesses", keyAccess);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Latches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLatches(Latch latch)
        {
            base.AddObject("Latches", latch);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserGroups(UserGroup userGroup)
        {
            base.AddObject("UserGroups", userGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserAccounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserAccounts(UserAccount userAccount)
        {
            base.AddObject("UserAccounts", userAccount);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NERVModel", Name="KeyAccess")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class KeyAccess : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new KeyAccess object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="userGroupId">Initial value of the UserGroupId property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        /// <param name="latchId">Initial value of the LatchId property.</param>
        public static KeyAccess CreateKeyAccess(global::System.Int32 id, global::System.Int32 userGroupId, global::System.Int32 value, global::System.Int32 latchId)
        {
            KeyAccess keyAccess = new KeyAccess();
            keyAccess.Id = id;
            keyAccess.UserGroupId = userGroupId;
            keyAccess.Value = value;
            keyAccess.LatchId = latchId;
            return keyAccess;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserGroupId
        {
            get
            {
                return _UserGroupId;
            }
            set
            {
                OnUserGroupIdChanging(value);
                ReportPropertyChanging("UserGroupId");
                _UserGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserGroupId");
                OnUserGroupIdChanged();
            }
        }
        private global::System.Int32 _UserGroupId;
        partial void OnUserGroupIdChanging(global::System.Int32 value);
        partial void OnUserGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LatchId
        {
            get
            {
                return _LatchId;
            }
            set
            {
                OnLatchIdChanging(value);
                ReportPropertyChanging("LatchId");
                _LatchId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LatchId");
                OnLatchIdChanged();
            }
        }
        private global::System.Int32 _LatchId;
        partial void OnLatchIdChanging(global::System.Int32 value);
        partial void OnLatchIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_KeyAccess_Latch", "Latch")]
        public Latch Latch
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_KeyAccess_Latch", "Latch").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_KeyAccess_Latch", "Latch").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Latch> LatchReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_KeyAccess_Latch", "Latch");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Latch>("NERVModel.FK_KeyAccess_Latch", "Latch", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_KeyAccess_UserGroup", "UserGroup")]
        public UserGroup UserGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_KeyAccess_UserGroup", "UserGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_KeyAccess_UserGroup", "UserGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserGroup> UserGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_KeyAccess_UserGroup", "UserGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserGroup>("NERVModel.FK_KeyAccess_UserGroup", "UserGroup", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NERVModel", Name="Latch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Latch : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Latch object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="latchParent">Initial value of the LatchParent property.</param>
        public static Latch CreateLatch(global::System.Int32 id, global::System.String code, global::System.Int32 latchParent)
        {
            Latch latch = new Latch();
            latch.Id = id;
            latch.Code = code;
            latch.LatchParent = latchParent;
            return latch;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LatchParent
        {
            get
            {
                return _LatchParent;
            }
            set
            {
                OnLatchParentChanging(value);
                ReportPropertyChanging("LatchParent");
                _LatchParent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LatchParent");
                OnLatchParentChanged();
            }
        }
        private global::System.Int32 _LatchParent;
        partial void OnLatchParentChanging(global::System.Int32 value);
        partial void OnLatchParentChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_KeyAccess_Latch", "KeyAccess")]
        public EntityCollection<KeyAccess> KeyAccesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<KeyAccess>("NERVModel.FK_KeyAccess_Latch", "KeyAccess");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<KeyAccess>("NERVModel.FK_KeyAccess_Latch", "KeyAccess", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_Latch_Latch", "Latch1")]
        public EntityCollection<Latch> Latch1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Latch>("NERVModel.FK_Latch_Latch", "Latch1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Latch>("NERVModel.FK_Latch_Latch", "Latch1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_Latch_Latch", "Latch")]
        public Latch Latch2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_Latch_Latch", "Latch").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_Latch_Latch", "Latch").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Latch> Latch2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Latch>("NERVModel.FK_Latch_Latch", "Latch");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Latch>("NERVModel.FK_Latch_Latch", "Latch", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NERVModel", Name="UserAccount")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserAccount : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserAccount object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="account">Initial value of the Account property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="enterpriseId">Initial value of the EnterpriseId property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="isOnline">Initial value of the IsOnline property.</param>
        /// <param name="userGroupId">Initial value of the UserGroupId property.</param>
        public static UserAccount CreateUserAccount(global::System.Int32 id, global::System.String account, global::System.String password, global::System.Int32 enterpriseId, global::System.Boolean status, global::System.Boolean isOnline, global::System.Int32 userGroupId)
        {
            UserAccount userAccount = new UserAccount();
            userAccount.Id = id;
            userAccount.Account = account;
            userAccount.Password = password;
            userAccount.EnterpriseId = enterpriseId;
            userAccount.Status = status;
            userAccount.IsOnline = isOnline;
            userAccount.UserGroupId = userGroupId;
            return userAccount;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account
        {
            get
            {
                return _Account;
            }
            set
            {
                OnAccountChanging(value);
                ReportPropertyChanging("Account");
                _Account = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account");
                OnAccountChanged();
            }
        }
        private global::System.String _Account;
        partial void OnAccountChanging(global::System.String value);
        partial void OnAccountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EnterpriseId
        {
            get
            {
                return _EnterpriseId;
            }
            set
            {
                OnEnterpriseIdChanging(value);
                ReportPropertyChanging("EnterpriseId");
                _EnterpriseId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EnterpriseId");
                OnEnterpriseIdChanged();
            }
        }
        private global::System.Int32 _EnterpriseId;
        partial void OnEnterpriseIdChanging(global::System.Int32 value);
        partial void OnEnterpriseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Boolean _Status;
        partial void OnStatusChanging(global::System.Boolean value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsOnline
        {
            get
            {
                return _IsOnline;
            }
            set
            {
                OnIsOnlineChanging(value);
                ReportPropertyChanging("IsOnline");
                _IsOnline = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsOnline");
                OnIsOnlineChanged();
            }
        }
        private global::System.Boolean _IsOnline;
        partial void OnIsOnlineChanging(global::System.Boolean value);
        partial void OnIsOnlineChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserGroupId
        {
            get
            {
                return _UserGroupId;
            }
            set
            {
                OnUserGroupIdChanging(value);
                ReportPropertyChanging("UserGroupId");
                _UserGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserGroupId");
                OnUserGroupIdChanged();
            }
        }
        private global::System.Int32 _UserGroupId;
        partial void OnUserGroupIdChanging(global::System.Int32 value);
        partial void OnUserGroupIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_UserAccount_UserGroup", "UserGroup")]
        public UserGroup UserGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_UserAccount_UserGroup", "UserGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_UserAccount_UserGroup", "UserGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserGroup> UserGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserGroup>("NERVModel.FK_UserAccount_UserGroup", "UserGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserGroup>("NERVModel.FK_UserAccount_UserGroup", "UserGroup", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NERVModel", Name="UserGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserGroup object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static UserGroup CreateUserGroup(global::System.Int32 id, global::System.String name, global::System.String description)
        {
            UserGroup userGroup = new UserGroup();
            userGroup.Id = id;
            userGroup.Name = name;
            userGroup.Description = description;
            return userGroup;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_KeyAccess_UserGroup", "KeyAccess")]
        public EntityCollection<KeyAccess> KeyAccesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<KeyAccess>("NERVModel.FK_KeyAccess_UserGroup", "KeyAccess");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<KeyAccess>("NERVModel.FK_KeyAccess_UserGroup", "KeyAccess", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NERVModel", "FK_UserAccount_UserGroup", "UserAccount")]
        public EntityCollection<UserAccount> UserAccounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserAccount>("NERVModel.FK_UserAccount_UserGroup", "UserAccount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserAccount>("NERVModel.FK_UserAccount_UserGroup", "UserAccount", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
